{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/StronaTata/aqua_company/src/components/Navigation/Navigation.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Navigation.css';\nimport logo from '../static/logo.png';\nimport { gsap } from \"gsap\";\nimport { TweenLite } from \"gsap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Navigation() {\n  _s();\n\n  //First the variables our app is going to use need to be declared\n  //References to DOM elements\n  var window = window;\n  var document = document; //Only links that starts with #\n  //\tvar navButtons = (\"nav a\").filter(\"[href^=#]\");\n\n  var navGoPrev = \".go-prev\"; //KOSZ\n\n  var navGoNext = \".go-next\"; // KOSZ\n\n  var slidesContainer = \".slides-container\";\n  var slides = \".slide\";\n  var currentSlide = slides.first(); //Animating flag - is our app animating\n\n  var isAnimating = false; //The height of the window\n\n  var pageHeight = window.innerHeight(); //Key codes for up and down arrows on keyboard. We'll be using this to navigate change slides using the keyboard\n\n  var keyCodes = {\n    UP: 38,\n    DOWN: 40\n  }; //Going to the first slide\n\n  goToSlide(currentSlide);\n  /*\n  *   Adding event listeners\n  * */\n\n  window.on(\"resize\", onResize).resize();\n  window.on(\"mousewheel DOMMouseScroll\", onMouseWheel);\n  document.on(\"keydown\", onKeyDown);\n  navButtons.on(\"click\", onNavButtonClick);\n  navGoPrev.on(\"click\", goToPrevSlide);\n  navGoNext.on(\"click\", goToNextSlide);\n  /*\n  *   Internal functions\n  * */\n\n  /*\n  *   When a button is clicked - first get the button href, and then slide to the container, if there's such a container\n  * */\n\n  function onNavButtonClick(event) {\n    //The clicked button\n    var button = this; //The slide the button points to\n\n    var slide = button.attr(\"href\"); //If the slide exists, we go to it\n\n    if (slide.length) {\n      goToSlide(slide);\n      event.preventDefault();\n    }\n  }\n  /*\n  *   Getting the pressed key. Only if it's up or down arrow, we go to prev or next slide and prevent default behaviour\n  *   This way, if there's text input, the user is still able to fill it\n  * */\n\n\n  function onKeyDown(event) {\n    var PRESSED_KEY = event.keyCode;\n\n    if (PRESSED_KEY == keyCodes.UP) {\n      goToPrevSlide();\n      event.preventDefault();\n    } else if (PRESSED_KEY == keyCodes.DOWN) {\n      goToNextSlide();\n      event.preventDefault();\n    }\n  }\n  /*\n  *   When user scrolls with the mouse, we have to change slides\n  * */\n\n\n  function onMouseWheel(event) {\n    //Normalize event wheel delta\n    var delta = event.originalEvent.wheelDelta / 30 || -event.originalEvent.detail; //If the user scrolled up, it goes to previous slide, otherwise - to next slide\n\n    if (delta < -1) {\n      goToNextSlide();\n    } else if (delta > 1) {\n      goToPrevSlide();\n    }\n\n    event.preventDefault();\n  }\n  /*\n  *   If there's a previous slide, slide to it\n  * */\n\n\n  function goToPrevSlide() {\n    if (currentSlide.prev().length) {\n      goToSlide(currentSlide.prev());\n    }\n  }\n  /*\n  *   If there's a next slide, slide to it\n  * */\n\n\n  function goToNextSlide() {\n    if (currentSlide.next().length) {\n      goToSlide(currentSlide.next());\n    }\n  }\n  /*\n  *   Actual transition between slides\n  * */\n\n\n  function goToSlide(slide) {\n    //If the slides are not changing and there's such a slide\n    if (!isAnimating && slide.length) {\n      //setting animating flag to true\n      isAnimating = true;\n      currentSlide = slide; //Sliding to current slide\n\n      TweenLite.to(slidesContainer, 1, {\n        scrollTo: {\n          y: pageHeight * currentSlide.index()\n        },\n        onComplete: onSlideChangeEnd,\n        onCompleteScope: this\n      }); //Animating menu items\n\n      TweenLite.to(navButtons.filter(\".active\"), 0.5, {\n        className: \"-=active\"\n      });\n      TweenLite.to(navButtons.filter(\"[href=#\" + currentSlide.attr(\"id\") + \"]\"), 0.5, {\n        className: \"+=active\"\n      });\n    }\n  }\n  /*\n  *   Once the sliding is finished, we need to restore \"isAnimating\" flag.\n  *   You can also do other things in this function, such as changing page title\n  * */\n\n\n  function onSlideChangeEnd() {\n    isAnimating = false;\n  }\n  /*\n  *   When user resize it's browser we need to know the new height, so we can properly align the current slide\n  * */\n\n\n  function onResize(event) {\n    //This will give us the new height of the window\n    var newPageHeight = window.innerHeight();\n    /*\n    *   If the new height is different from the old height ( the browser is resized vertically ), the slides are resized\n    * */\n\n    if (pageHeight !== newPageHeight) {\n      pageHeight = newPageHeight; //This can be done via CSS only, but fails into some old browsers, so I prefer to set height via JS\n\n      TweenLite.set([slidesContainer, slides], {\n        height: pageHeight + \"px\"\n      }); //The current slide should be always on the top\n\n      TweenLite.set(slidesContainer, {\n        scrollTo: {\n          y: pageHeight * currentSlide.index()\n        }\n      });\n    }\n  }\n\n  const [activeDot, setActiveDot] = useState(\"about\");\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"navigation__wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"navigation__list\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setActiveDot(\"about\"),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#about\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"O Nas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 59\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 77\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setActiveDot(\"services\"),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#services\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Us\\u0142ugi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 64\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 83\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 44\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setActiveDot(\"realizations\"),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#realizations\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Realizacje\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 72\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot-active\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 95\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => setActiveDot(\"contact\"),\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#contact\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Kontakt\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 62\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dot\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 82\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 1\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 1\n  }, this);\n}\n\n_s(Navigation, \"DHSlKadCiASpgXqx5CXNDlXd158=\");\n\n_c = Navigation;\nexport default Navigation;\n\nvar _c;\n\n$RefreshReg$(_c, \"Navigation\");","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/StronaTata/aqua_company/src/components/Navigation/Navigation.js"],"names":["React","useState","useEffect","useRef","logo","gsap","TweenLite","Navigation","window","document","navGoPrev","navGoNext","slidesContainer","slides","currentSlide","first","isAnimating","pageHeight","innerHeight","keyCodes","UP","DOWN","goToSlide","on","onResize","resize","onMouseWheel","onKeyDown","navButtons","onNavButtonClick","goToPrevSlide","goToNextSlide","event","button","slide","attr","length","preventDefault","PRESSED_KEY","keyCode","delta","originalEvent","wheelDelta","detail","prev","next","to","scrollTo","y","index","onComplete","onSlideChangeEnd","onCompleteScope","filter","className","newPageHeight","set","height","activeDot","setActiveDot"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\nimport './Navigation.css'\nimport logo from '../static/logo.png'\nimport { gsap } from \"gsap\";\nimport { TweenLite } from \"gsap\";\n\n\n\nfunction Navigation() {\n\n  \n//First the variables our app is going to use need to be declared\n\n\t//References to DOM elements\n\tvar window = (window);\n\tvar document = (document);\n\t//Only links that starts with #\n//\tvar navButtons = (\"nav a\").filter(\"[href^=#]\");\n\tvar navGoPrev = (\".go-prev\"); //KOSZ\n\tvar navGoNext = (\".go-next\"); // KOSZ\n\tvar slidesContainer = (\".slides-container\");\n\tvar slides = (\".slide\");\n\tvar currentSlide = slides.first();\n\n\t//Animating flag - is our app animating\n\tvar isAnimating = false;\n\n\t//The height of the window\n\tvar pageHeight = window.innerHeight();\n\n\t//Key codes for up and down arrows on keyboard. We'll be using this to navigate change slides using the keyboard\n\tvar keyCodes = {\n\t\tUP  : 38,\n\t\tDOWN: 40\n\t}\n\n\t//Going to the first slide\n\tgoToSlide(currentSlide);\n\n\n\t/*\n\t*   Adding event listeners\n\t* */\n\n\twindow.on(\"resize\", onResize).resize();\n\twindow.on(\"mousewheel DOMMouseScroll\", onMouseWheel);\n\tdocument.on(\"keydown\", onKeyDown);\n\tnavButtons.on(\"click\", onNavButtonClick);\n\tnavGoPrev.on(\"click\", goToPrevSlide);\n\tnavGoNext.on(\"click\", goToNextSlide);\n\n\t/*\n\t*   Internal functions\n\t* */\n\n\n\t/*\n\t*   When a button is clicked - first get the button href, and then slide to the container, if there's such a container\n\t* */\n\tfunction onNavButtonClick(event)\n\t{\n\t\t//The clicked button\n\t\tvar button = (this);\n\n\t\t//The slide the button points to\n\t\tvar slide = (button.attr(\"href\"));\n\n\t\t//If the slide exists, we go to it\n\t\tif(slide.length)\n\t\t{\n\t\t\tgoToSlide(slide);\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t/*\n\t*   Getting the pressed key. Only if it's up or down arrow, we go to prev or next slide and prevent default behaviour\n\t*   This way, if there's text input, the user is still able to fill it\n\t* */\n\tfunction onKeyDown(event)\n\t{\n\n\t\tvar PRESSED_KEY = event.keyCode;\n\n\t\tif(PRESSED_KEY == keyCodes.UP)\n\t\t{\n\t\t\tgoToPrevSlide();\n\t\t\tevent.preventDefault();\n\t\t}\n\t\telse if(PRESSED_KEY == keyCodes.DOWN)\n\t\t{\n\t\t\tgoToNextSlide();\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t}\n\n\t/*\n\t*   When user scrolls with the mouse, we have to change slides\n\t* */\n\tfunction onMouseWheel(event)\n\t{\n\t\t//Normalize event wheel delta\n\t\tvar delta = event.originalEvent.wheelDelta / 30 || -event.originalEvent.detail;\n\n\t\t//If the user scrolled up, it goes to previous slide, otherwise - to next slide\n\t\tif(delta < -1)\n\t\t{\n\t\t\tgoToNextSlide();\n\t\t}\n\t\telse if(delta > 1)\n\t\t{\n\t\t\tgoToPrevSlide();\n\t\t}\n\n\t\tevent.preventDefault();\n\t}\n\n\t/*\n\t*   If there's a previous slide, slide to it\n\t* */\n\tfunction goToPrevSlide()\n\t{\n\t\tif(currentSlide.prev().length)\n\t\t{\n\t\t\tgoToSlide(currentSlide.prev());\n\t\t}\n\t}\n\n\t/*\n\t*   If there's a next slide, slide to it\n\t* */\n\tfunction goToNextSlide()\n\t{\n\t\tif(currentSlide.next().length)\n\t\t{\n\t\t\tgoToSlide(currentSlide.next());\n\t\t}\n\t}\n\n\t/*\n\t*   Actual transition between slides\n\t* */\n\tfunction goToSlide(slide)\n\t{\n\t\t//If the slides are not changing and there's such a slide\n\t\tif(!isAnimating && slide.length)\n\t\t{\n\t\t\t//setting animating flag to true\n\t\t\tisAnimating = true;\n\t\t\tcurrentSlide = slide;\n\n\t\t\t//Sliding to current slide\n\t\t\tTweenLite.to(slidesContainer, 1, {scrollTo: {y: pageHeight * currentSlide.index() }, onComplete: onSlideChangeEnd, onCompleteScope: this});\n\n\t\t\t//Animating menu items\n\t\t\tTweenLite.to(navButtons.filter(\".active\"), 0.5, {className: \"-=active\"});\n\n\t\t\tTweenLite.to(navButtons.filter(\"[href=#\" + currentSlide.attr(\"id\") + \"]\"), 0.5, {className: \"+=active\"});\n\n\t\t}\n\t}\n\n\t/*\n\t*   Once the sliding is finished, we need to restore \"isAnimating\" flag.\n\t*   You can also do other things in this function, such as changing page title\n\t* */\n\tfunction onSlideChangeEnd()\n\t{\n\t\tisAnimating = false;\n\t}\n\n\t/*\n\t*   When user resize it's browser we need to know the new height, so we can properly align the current slide\n\t* */\n\tfunction onResize(event)\n\t{\n\n\t\t//This will give us the new height of the window\n\t\tvar newPageHeight = window.innerHeight();\n\n\t\t/*\n\t\t*   If the new height is different from the old height ( the browser is resized vertically ), the slides are resized\n\t\t* */\n\t\tif(pageHeight !== newPageHeight)\n\t\t{\n\t\t\tpageHeight = newPageHeight;\n\n\t\t\t//This can be done via CSS only, but fails into some old browsers, so I prefer to set height via JS\n\t\t\tTweenLite.set([slidesContainer, slides], {height: pageHeight + \"px\"});\n\n\t\t\t//The current slide should be always on the top\n\t\t\tTweenLite.set(slidesContainer, {scrollTo: {y: pageHeight * currentSlide.index() }});\n\t\t}\n\n\t}\n\n\n\nconst [activeDot, setActiveDot] = useState(\"about\");\n\n  return (\n<section className=\"navigation__wrapper\">\n{/* <a href=\"/\" className=\"navigation__logo\">\n<img src={logo}/>\n  <h2>YOURNAME</h2></a> */}\n\n<ul className=\"navigation__list\">\n<li onClick={()=>setActiveDot(\"about\")}><a href=\"#about\" ><span>O Nas</span><div className=\"dot\"/></a></li>\n<li onClick={()=>setActiveDot(\"services\")}><a href=\"#services\"><span>Usługi</span><div className=\"dot\"/></a></li>\n<li onClick={()=>setActiveDot(\"realizations\")}><a href=\"#realizations\"><span>Realizacje</span><div className=\"dot-active\"/></a></li>\n<li onClick={()=>setActiveDot(\"contact\")}><a href=\"#contact\"><span>Kontakt</span><div className=\"dot\"/></a></li>\n</ul>\n</section> \n    \n  );\n}\n\nexport default Navigation;"]},"metadata":{},"sourceType":"module"}