{"ast":null,"code":"var _jsxFileName = \"/Users/kamil/Desktop/Programowanie/StronaTata/aqua_company/src/components/test/test.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport './test.css';\nimport { gsap, Power1 } from \"gsap\";\nimport { Draggable } from \"gsap/all\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  useEffect(() => {\n    gsap.registerPlugin(Draggable);\n    var slideDelay = 1.5;\n    var slideDuration = 99999.3;\n    var snapX;\n    var slides = document.querySelectorAll(\".slide\");\n    var prevButton = document.querySelector(\"#prevButton\");\n    var nextButton = document.querySelector(\"#nextButton\");\n    var progressWrap = gsap.utils.wrap(0, 1);\n    var numSlides = slides.length;\n    gsap.set(slides, {\n      backgroundColor: \"random([red, blue, green, purple, orange, yellow, lime, pink])\",\n      xPercent: i => i * 100\n    });\n    var wrap = gsap.utils.wrap(-100, (numSlides - 1) * 100);\n    var timer = gsap.delayedCall(slideDelay, autoPlay);\n    var animation = gsap.to(slides, {\n      xPercent: \"+=\" + numSlides * 100,\n      duration: 1,\n      ease: \"none\",\n      paused: true,\n      repeat: -1,\n      modifiers: {\n        xPercent: wrap\n      }\n    });\n    var proxy = document.createElement(\"div\");\n    var slideAnimation = gsap.to({}, {});\n    var slideWidth = 0;\n    var wrapWidth = 0;\n    resize();\n    var draggable = new Draggable(proxy, {\n      trigger: \".slides-container\",\n      inertia: true,\n      onPress: updateDraggable,\n      onDrag: updateProgress,\n      onThrowUpdate: updateProgress,\n      snap: {\n        x: snapX\n      }\n    });\n    window.addEventListener(\"resize\", resize);\n    prevButton.addEventListener(\"click\", function () {\n      animateSlides(1);\n      console.log(\"do przodu\");\n    });\n    nextButton.addEventListener(\"click\", function () {\n      animateSlides(-1);\n      console.log(\"do tylu\");\n    });\n\n    function updateDraggable() {\n      timer.restart(true);\n      slideAnimation.kill();\n      this.update();\n    }\n\n    function animateSlides(direction) {\n      timer.restart(true);\n      slideAnimation.kill();\n      var x = snapX(gsap.getProperty(proxy, \"x\") + direction * slideWidth);\n      slideAnimation = gsap.to(proxy, {\n        x: x,\n        duration: slideDuration,\n        onUpdate: updateProgress\n      });\n    }\n\n    function autoPlay() {\n      if (draggable.isPressed || draggable.isDragging || draggable.isThrowing) {\n        timer.restart(true);\n      } else {\n        animateSlides(-1);\n      }\n    }\n\n    function updateProgress() {\n      animation.progress(progressWrap(gsap.getProperty(proxy, \"x\") / wrapWidth));\n    }\n\n    function resize() {\n      var norm = gsap.getProperty(proxy, \"x\") / wrapWidth || 0;\n      slideWidth = slides[0].offsetWidth;\n      wrapWidth = slideWidth * numSlides;\n      snapX = gsap.utils.snap(slideWidth);\n      gsap.set(proxy, {\n        x: norm * wrapWidth\n      });\n      animateSlides(0);\n      slideAnimation.progress(1);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slides-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slides-inner\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: \"1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slide\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 8\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        classname: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"prevButton\",\n          children: \"Prev\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"nextButton\",\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 4\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/Users/kamil/Desktop/Programowanie/StronaTata/aqua_company/src/components/test/test.js"],"names":["React","useState","useRef","useCallback","useEffect","gsap","Power1","Draggable","Test","registerPlugin","slideDelay","slideDuration","snapX","slides","document","querySelectorAll","prevButton","querySelector","nextButton","progressWrap","utils","wrap","numSlides","length","set","backgroundColor","xPercent","i","timer","delayedCall","autoPlay","animation","to","duration","ease","paused","repeat","modifiers","proxy","createElement","slideAnimation","slideWidth","wrapWidth","resize","draggable","trigger","inertia","onPress","updateDraggable","onDrag","updateProgress","onThrowUpdate","snap","x","window","addEventListener","animateSlides","console","log","restart","kill","update","direction","getProperty","onUpdate","isPressed","isDragging","isThrowing","progress","norm","offsetWidth"],"mappings":"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","sourcesContent":["\nimport React, { useState, useRef, useCallback, useEffect } from 'react';\nimport './test.css'\nimport { gsap, Power1 } from \"gsap\";\nimport { Draggable } from \"gsap/all\";\n\nexport default function Test() {\n\n\n\nuseEffect(()=>{\n    gsap.registerPlugin(Draggable);\n\nvar slideDelay = 1.5;\nvar slideDuration = 99999.3;\nvar snapX;\n\nvar slides = document.querySelectorAll(\".slide\");\nvar prevButton = document.querySelector(\"#prevButton\");\nvar nextButton = document.querySelector(\"#nextButton\");\nvar progressWrap = gsap.utils.wrap(0, 1);\n\nvar numSlides = slides.length;\n\ngsap.set(slides, {\n  backgroundColor: \"random([red, blue, green, purple, orange, yellow, lime, pink])\",\n  xPercent: i => i * 100\n});\n\nvar wrap = gsap.utils.wrap(-100, (numSlides - 1) * 100);\nvar timer = gsap.delayedCall(slideDelay, autoPlay);\n\nvar animation = gsap.to(slides, {\n  xPercent: \"+=\" + (numSlides * 100),\n  duration: 1,\n  ease: \"none\",\n  paused: true,\n  repeat: -1,\n  modifiers: {\n    xPercent: wrap\n  }\n});\n\nvar proxy = document.createElement(\"div\");\nvar slideAnimation = gsap.to({}, {});\nvar slideWidth = 0;\nvar wrapWidth = 0;\nresize();\n\nvar draggable = new Draggable(proxy, {\n  trigger: \".slides-container\",\n  inertia: true,\n  onPress: updateDraggable,\n  onDrag: updateProgress,\n  onThrowUpdate: updateProgress,\n  snap: {     \n    x: snapX\n  }\n});\n\nwindow.addEventListener(\"resize\", resize);\n\nprevButton.addEventListener(\"click\", function() {\n  animateSlides(1);\n  console.log(\"do przodu\")\n});\n\nnextButton.addEventListener(\"click\", function() {\n  animateSlides(-1);\n  console.log(\"do tylu\")\n});\n\nfunction updateDraggable() {\n  timer.restart(true);\n  slideAnimation.kill();\n  this.update();\n}\n\nfunction animateSlides(direction) {\n    \n  timer.restart(true);\n  slideAnimation.kill();\n  \n  var x = snapX(gsap.getProperty(proxy, \"x\") + direction * slideWidth);\n  \n  slideAnimation = gsap.to(proxy, {\n    x: x,\n    duration: slideDuration,\n    onUpdate: updateProgress\n  });  \n}\n\nfunction autoPlay() {  \n  if (draggable.isPressed || draggable.isDragging || draggable.isThrowing) {\n    timer.restart(true);\n  } else {\n    animateSlides(-1);\n  }\n}\n\nfunction updateProgress() { \n  animation.progress(progressWrap(gsap.getProperty(proxy, \"x\") / wrapWidth));\n}\n\nfunction resize() {\n  \n  var norm = (gsap.getProperty(proxy, \"x\") / wrapWidth) || 0;\n  \n  slideWidth = slides[0].offsetWidth;\n  wrapWidth = slideWidth * numSlides;\n  snapX = gsap.utils.snap(slideWidth);\n  \n  gsap.set(proxy, {\n    x: norm * wrapWidth\n  });\n  \n  animateSlides(0);\n  slideAnimation.progress(1);\n}\n\n     })\n\n\n\n\n    return (\n        <div>\n            <main>\n   \n   <div className=\"slides-container\">\n     <div className=\"slides-inner\">\n       <div className=\"slide\">1</div>\n       <div className=\"slide\">2</div>\n       <div className=\"slide\">3</div>\n       <div className=\"slide\">4</div>\n     </div>\n   </div>\n   \n   <div classname=\"controls\">\n     <button id=\"prevButton\">Prev</button>\n     <button id=\"nextButton\">Next</button>\n   </div>\n   \n </main>\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}